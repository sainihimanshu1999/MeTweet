{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","newVal","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","ActionBtn","tweet","action","setLikes","userLike","setUserLike","display","onClick","Tweet","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","send","loadTweets","alert","map","item","index","key","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3538a57f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react'\r\nimport {loadTweets} from '../lookup'\r\n\r\nexport function TweetsComponent(props){\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      let tempNewTweets = [...newTweets]\r\n      tempNewTweets.unshift({\r\n        content: newVal,\r\n        likes: 0,\r\n        id: 12313\r\n      })\r\n      setNewTweets(tempNewTweets)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className= {props.className}>\r\n      <div className='col-12 mb-3'>\r\n      <form onSubmit={handleSubmit}>\r\n        <textarea ref = {textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n        </textarea>\r\n        <button type = 'submit' className= ' btn btn-primary my-3'>Tweet</button>\r\n      </form>\r\n      </div>\r\n    <TweetsList newTweets={newTweets}/>\r\n    </div>\r\n\r\n}\r\n\r\n\r\nexport function ActionBtn(props) {\r\n    const {tweet,action} = props\r\n    const [likes,setLikes] = useState(tweet.likes ? likes = tweet.likes :0)\r\n    const [userLike, setUserLike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className:'btn btn-success btn-sm'\r\n    const actionDisplay = action.display ? action.display : 'Action'\r\n    const handleClick = (event) => {\r\n      event.preventDefault()\r\n      if (action.type ==='like'){\r\n        if (userLike === true){\r\n          setLikes(likes - 1)\r\n          setUserLike(false)\r\n        }\r\n        else{\r\n          setLikes(likes+1)\r\n          setUserLike(true)\r\n        }\r\n        \r\n        \r\n      }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${action.display}` : action.display\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n  }\r\n  \r\nexport function Tweet(props){\r\n    const {tweet} = props\r\n    const className = props.className ? props.className:'col-10 mx-auto col md-6'\r\n    return <div className={className} >\r\n      <p>{tweet.id}-{tweet.content}</p>\r\n      <div className='btn btn-group'>\r\n        <ActionBtn tweet={tweet} action={{type:\"like\", display:'Likes'}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"unlike\", display:'Unlike'}}/>\r\n        <ActionBtn tweet={tweet} action={{type:\"retweet\", display:'Retweet'}}/>\r\n      </div>\r\n    </div>\r\n  }\r\n\r\n  \r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState([])\r\n    const [tweets, setTweets] = useState([])\r\n    useEffect(()=>{\r\n      const final = [...props.newTweets].concat(tweetsInit)\r\n      if (final.length !== tweets.length) {\r\n        setTweets(final)\r\n      }\r\n    }, [props.newTweets, tweets, tweetsInit])\r\n\r\n    useEffect(() => {\r\n      const myCallback = (response, status) => {\r\n        if (status === 200){\r\n          setTweetsInit(response)\r\n        } else {\r\n          alert(\"There was an error\")\r\n        }\r\n      }\r\n      loadTweets(myCallback)\r\n    }, [tweetsInit])\r\n    return tweets.map((item, index)=>{\r\n      return <Tweet tweet={item} className='my-5 py-5 border bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n  }\r\n","export function loadTweets(callback) {\r\n    const xhr = new XMLHttpRequest()\r\n    const method = 'GET'\r\n    const url = 'http://127.0.0.1:8000/api/tweets/'\r\n    const responseType = 'json'\r\n    xhr.responseType = responseType\r\n    xhr.open(method, url)\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function(e) {\r\n      console.log(e)\r\n      callback({'message':'The request was an error'}, 400)\r\n    }\r\n    xhr.send()\r\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {TweetsComponent} from './tweets'\nimport {loadTweets} from './lookup'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponent} from './tweets';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst appEl = document.getElementById('root')\nif (appEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst tweetsEl =  document.getElementById('metweet')\nif(tweetsEl){\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent />\n    </React.StrictMode>,\n    tweetsEl\n  );\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}